# filepath: d:\HealthyCareSystem\core\management\commands\populate_db.py
import random
from django.core.management.base import BaseCommand
from django.contrib.auth.hashers import make_password
from datetime import datetime, timedelta, date, time

from accounts.models import User
from doctors.models import Specialization, Doctor
from patients.models import Patient
from appointments.models import Appointment, TimeSlot
from chatbot.models import ChatbotKnowledge, HealthSymptom

class Command(BaseCommand):
    help = 'Populates the database with sample data for the HealthyCareSystem'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Starting database population...'))

        # Clean up existing data to avoid duplicates if script is run multiple times
        self.stdout.write(self.style.WARNING('Deleting existing data...'))
        Appointment.objects.all().delete()
        TimeSlot.objects.all().delete()
        Patient.objects.all().delete()
        Doctor.objects.all().delete()
        Specialization.objects.all().delete()
        ChatbotKnowledge.objects.all().delete()
        HealthSymptom.objects.all().delete()
        User.objects.filter(user_type__in=['patient', 'doctor']).delete() # Keep superuser

        # --- Create Specializations ---
        self.stdout.write(self.style.HTTP_INFO('Creating Specializations...'))
        specializations_data = [
            {"name": "Tim mạch", "description": "Chuyên khoa tim và mạch máu."},
            {"name": "Nội tổng quát", "description": "Khám và điều trị các bệnh nội khoa tổng quát."},
            {"name": "Nhi khoa", "description": "Chăm sóc sức khỏe cho trẻ em."},
            {"name": "Sản phụ khoa", "description": "Chăm sóc sức khỏe sinh sản cho phụ nữ."},
            {"name": "Da liễu", "description": "Điều trị các bệnh về da."},
            {"name": "Tai mũi họng", "description": "Điều trị các bệnh liên quan đến tai, mũi, họng."},
            {"name": "Mắt", "description": "Khám và điều trị các bệnh về mắt."},
            {"name": "Cơ xương khớp", "description": "Điều trị các bệnh về cơ, xương, khớp."},
            {"name": "Thần kinh", "description": "Điều trị các bệnh về hệ thần kinh."},
            {"name": "Tiêu hóa", "description": "Điều trị các bệnh về hệ tiêu hóa."}
        ]
        specializations = {}
        for spec_data in specializations_data:
            spec = Specialization.objects.create(**spec_data)
            specializations[spec_data["name"]] = spec
            self.stdout.write(self.style.SUCCESS(f'Successfully created Specialization: {spec.name}'))

        # --- Create Doctors ---
        self.stdout.write(self.style.HTTP_INFO('Creating Doctors...'))
        doctors_data = [
            {"username": "bs.vananh", "first_name": "Vân", "last_name": "Anh", "email": "vananh@example.com", "phone_number": "0901234567", "specialization": "Tim mạch", "bio": "Bác sĩ chuyên khoa Tim mạch với 10 năm kinh nghiệm.", "experience_years": 10, "consultation_fee": 500000},
            {"username": "bs.minhtri", "first_name": "Minh", "last_name": "Trí", "email": "minhtri@example.com", "phone_number": "0902345678", "specialization": "Nội tổng quát", "bio": "Bác sĩ Nội tổng quát, tận tâm với bệnh nhân.", "experience_years": 8, "consultation_fee": 400000},
            {"username": "bs.hoanganh", "first_name": "Hoàng", "last_name": "Anh", "email": "hoanganh@example.com", "phone_number": "0903456789", "specialization": "Nhi khoa", "bio": "Chuyên gia Nhi khoa, yêu trẻ.", "experience_years": 12, "consultation_fee": 450000},
            {"username": "bs.thuylinh", "first_name": "Thùy", "last_name": "Linh", "email": "thuylinh@example.com", "phone_number": "0904567890", "specialization": "Sản phụ khoa", "bio": "Bác sĩ Sản phụ khoa, giàu kinh nghiệm.", "experience_years": 15, "consultation_fee": 550000},
            {"username": "bs.quanghuy", "first_name": "Quang", "last_name": "Huy", "email": "quanghuy@example.com", "phone_number": "0905678901", "specialization": "Da liễu", "bio": "Chuyên gia Da liễu hàng đầu.", "experience_years": 7, "consultation_fee": 350000},
        ]
        doctors_list = []
        for doc_data in doctors_data:
            user = User.objects.create_user(
                username=doc_data["username"],
                password='doctorpass123', # Default password for doctors
                email=doc_data["email"],
                first_name=doc_data["first_name"],
                last_name=doc_data["last_name"],
                user_type='doctor',
                phone=doc_data["phone_number"]
            )
            # Create Doctor instance
            doctor = Doctor.objects.create(
                user=user,
                # doctor_id will be auto-generated by the model's save method
                license_number=f"LICENSE-{doc_data['username'].replace('.', '')}", # Dummy license
                education="Đại học Y Dược TP.HCM", # Dummy education
                bio=doc_data["bio"],
                years_of_experience=doc_data["experience_years"], # Corrected field name
                consultation_fee=doc_data["consultation_fee"]
            )
            # Add specialization (ManyToMany relationship)
            doctor.specializations.add(specializations[doc_data["specialization"]]) # Corrected field name
            doctor.save() # Save again to ensure M2M is persisted if needed, and doctor_id is generated
            
            doctors_list.append(doctor)
            self.stdout.write(self.style.SUCCESS(f'Successfully created Doctor: {doctor.user.get_full_name()} with ID: {doctor.doctor_id}'))

        # --- Create TimeSlots ---
        self.stdout.write(self.style.HTTP_INFO('Creating TimeSlots...'))
        today = date.today()
        for doctor in doctors_list:
            for i in range(7): # Create timeslots for the next 7 days
                current_date = today + timedelta(days=i)
                # Morning slots
                for hour in range(8, 12): # 8 AM to 11 AM
                    TimeSlot.objects.create(
                        doctor=doctor,
                        date=current_date,
                        start_time=time(hour, 0, 0),
                        end_time=time(hour, 30, 0),
                        is_available=random.choice([True, False])
                    )
                    TimeSlot.objects.create(
                        doctor=doctor,
                        date=current_date,
                        start_time=time(hour, 30, 0),
                        end_time=time(hour + 1, 0, 0),
                        is_available=random.choice([True, False])
                    )
                # Afternoon slots
                for hour in range(13, 17): # 1 PM to 4 PM
                    TimeSlot.objects.create(
                        doctor=doctor,
                        date=current_date,
                        start_time=time(hour, 0, 0),
                        end_time=time(hour, 30, 0),
                        is_available=random.choice([True, False])
                    )
                    TimeSlot.objects.create(
                        doctor=doctor,
                        date=current_date,
                        start_time=time(hour, 30, 0),
                        end_time=time(hour + 1, 0, 0),
                        is_available=random.choice([True, False])
                    )
            self.stdout.write(self.style.SUCCESS(f'Created timeslots for Dr. {doctor.user.get_full_name()}'))


        # --- Create Patients ---
        self.stdout.write(self.style.HTTP_INFO('Creating Patients...'))
        patients_data = [
            {"username": "patient.an", "first_name": "An", "last_name": "Nguyễn", "email": "an.nguyen@example.com", "phone_number": "0912345678", "address": "123 Đường ABC, Quận 1, TP.HCM", "date_of_birth": "1990-05-15", "gender": "male"},
            {"username": "patient.binh", "first_name": "Bình", "last_name": "Trần", "email": "binh.tran@example.com", "phone_number": "0913456789", "address": "456 Đường XYZ, Quận 3, TP.HCM", "date_of_birth": "1985-10-20", "gender": "female"},
            {"username": "patient.cuong", "first_name": "Cường", "last_name": "Lê", "email": "cuong.le@example.com", "phone_number": "0914567890", "address": "789 Đường KLM, Quận 5, TP.HCM", "date_of_birth": "1995-02-25", "gender": "male"},
        ]
        patients_list = []
        for pat_data in patients_data:
            user = User.objects.create_user(
                username=pat_data["username"],
                password='patientpass123', # Default password for patients
                email=pat_data["email"],
                first_name=pat_data["first_name"],
                last_name=pat_data["last_name"],
                user_type='patient',
                phone=pat_data["phone_number"],
                address=pat_data["address"],  # Set address on User model
                date_of_birth=pat_data["date_of_birth"]  # Set date_of_birth on User model
            )
            # Map gender to GENDER_CHOICES keys
            gender_map = {"male": "M", "female": "F", "other": "O"}
            patient_gender = gender_map.get(pat_data["gender"].lower(), "O")

            patient = Patient.objects.create(
                user=user,
                # patient_id will be auto-generated by the model's save method
                gender=patient_gender # Use mapped gender
                # Removed address and date_of_birth as they are on the User model
            )
            patients_list.append(patient)
            self.stdout.write(self.style.SUCCESS(f'Successfully created Patient: {patient.user.get_full_name()} with ID: {patient.patient_id}'))

        # --- Create Appointments ---
        self.stdout.write(self.style.HTTP_INFO('Creating Appointments...'))
        appointment_reasons = [
            "Khám sức khỏe định kỳ", "Đau đầu, chóng mặt", "Ho, sốt kéo dài", 
            "Tư vấn dinh dưỡng", "Kiểm tra thai sản", "Đau bụng"
        ]
        appointment_types = [choice[0] for choice in Appointment.APPOINTMENT_TYPE_CHOICES]
        # appointment_statuses = [choice[0] for choice in Appointment.STATUS_CHOICES] # Use this if you want random statuses
        appointment_statuses_for_creation = ['pending', 'confirmed'] # For new appointments, usually pending or confirmed

        for i in range(10): # Create 10 sample appointments
            patient = random.choice(patients_list)
            doctor = random.choice(doctors_list)
            
            # Find an available timeslot for this doctor
            available_slots = TimeSlot.objects.filter(doctor=doctor, is_available=True, date__gte=today).order_by('date', 'start_time')
            if available_slots.exists():
                slot = available_slots.first()
                appointment_date = slot.date
                appointment_time = slot.start_time
                current_status = random.choice(appointment_statuses_for_creation)
                
                Appointment.objects.create(
                    patient=patient,
                    doctor=doctor,
                    appointment_date=appointment_date,
                    appointment_time=appointment_time,
                    appointment_type=random.choice(appointment_types),
                    status=current_status,
                    reason=random.choice(appointment_reasons) + f" cho {patient.user.first_name}",
                )
                # Mark slot as unavailable if appointment is confirmed or pending
                if current_status in ['pending', 'confirmed', 'in_progress']: # in_progress might be set later
                    slot.is_available = False
                    slot.save()
                self.stdout.write(self.style.SUCCESS(f'Created appointment for {patient.user.get_full_name()} with Dr. {doctor.user.get_full_name()} on {appointment_date} at {appointment_time}'))
            else:
                self.stdout.write(self.style.WARNING(f'No available timeslots for Dr. {doctor.user.get_full_name()} to create appointment.'))


        # --- Create ChatbotKnowledge ---
        self.stdout.write(self.style.HTTP_INFO('Creating ChatbotKnowledge...'))
        knowledge_data = [
            # General Information
            {"question": "Phòng khám ở đâu?", "answer": "Phòng khám HealthyCare tọa lạc tại 123 Đường Sức Khỏe, Phường An Lành, Quận Bình Yên, TP. Hồ Chí Minh.", "keywords": "địa chỉ, vị trí, ở đâu"},
            {"question": "Giờ làm việc của phòng khám?", "answer": "Phòng khám làm việc từ Thứ 2 đến Thứ 7, Sáng: 7:30 - 11:30, Chiều: 13:30 - 17:00. Chủ nhật nghỉ.", "keywords": "thời gian, giờ làm việc, mở cửa"},
            {"question": "Làm thế nào để đặt lịch khám?", "answer": "Bạn có thể đặt lịch khám trực tuyến qua website, ứng dụng di động của chúng tôi, hoặc gọi điện thoại đến hotline 028 3838 3838.", "keywords": "đặt lịch, hẹn khám, đăng ký khám"},
            {"question": "Chi phí khám bệnh là bao nhiêu?", "answer": "Chi phí khám bệnh tùy thuộc vào chuyên khoa và bác sĩ bạn chọn. Vui lòng tham khảo bảng giá trên website hoặc liên hệ để biết thêm chi tiết.", "keywords": "chi phí, giá khám, tiền khám"},
            {"question": "Phòng khám có những chuyên khoa nào?", "answer": "Chúng tôi có các chuyên khoa: Tim mạch, Nội tổng quát, Nhi, Sản phụ khoa, Da liễu, Tai mũi họng, Mắt, Cơ xương khớp, Thần kinh, Tiêu hóa. Bạn cần tư vấn chuyên khoa nào?", "keywords": "chuyên khoa, khoa khám"},
            
            # Symptoms and Advice
            {"question": "Tôi bị đau đầu thì nên làm gì?", "answer": "Nếu bạn bị đau đầu nhẹ, bạn có thể thử nghỉ ngơi, uống đủ nước, tránh ánh sáng mạnh và tiếng ồn. Nếu đau đầu kéo dài, dữ dội hoặc kèm theo các triệu chứng khác như sốt, buồn nôn, vui lòng đến gặp bác sĩ.", "keywords": "đau đầu, nhức đầu"},
            {"question": "Triệu chứng của cảm cúm là gì?", "answer": "Các triệu chứng phổ biến của cảm cúm bao gồm sốt, ho, đau họng, chảy nước mũi, nghẹt mũi, đau nhức cơ thể, mệt mỏi. Bạn nên nghỉ ngơi và uống nhiều nước.", "keywords": "cảm cúm, triệu chứng cúm"},
            {"question": "Làm sao để phòng ngừa bệnh tiểu đường?", "answer": "Để phòng ngừa bệnh tiểu đường, bạn nên duy trì cân nặng hợp lý, có chế độ ăn uống lành mạnh (giảm đường, tinh bột, tăng cường rau xanh, trái cây), tập thể dục đều đặn và kiểm tra sức khỏe định kỳ.", "keywords": "tiểu đường, phòng ngừa, đái tháo đường"},
            {"question": "Tôi bị mất ngủ phải làm sao?", "answer": "Để cải thiện giấc ngủ, bạn có thể tạo thói quen đi ngủ và thức dậy đúng giờ, giữ phòng ngủ thoáng mát, tối và yên tĩnh, tránh sử dụng thiết bị điện tử trước khi ngủ, hạn chế caffeine và rượu bia vào buổi tối. Nếu tình trạng mất ngủ kéo dài, bạn nên tham khảo ý kiến bác sĩ.", "keywords": "mất ngủ, khó ngủ"},
            {"question": "Cách sơ cứu khi bị bỏng nhẹ?", "answer": "Khi bị bỏng nhẹ, hãy làm mát vết bỏng dưới vòi nước lạnh trong khoảng 10-15 phút. Không dùng đá lạnh trực tiếp. Có thể dùng gạc sạch che vết bỏng. Không bôi kem đánh răng hay các chất lạ lên vết bỏng. Nếu bỏng nặng hoặc diện tích lớn, cần đến cơ sở y tế ngay.", "keywords": "bỏng, sơ cứu bỏng"},

            # Doctor Information
            {"question": "Bác sĩ nào chuyên về tim mạch?", "answer": "Chúng tôi có Bác sĩ Vân Anh chuyên khoa Tim mạch. Bạn có muốn biết thêm thông tin hoặc đặt lịch với bác sĩ Vân Anh không?", "keywords": "bác sĩ tim mạch, tim"},
            {"question": "Tôi muốn khám nhi cho con.", "answer": "Bác sĩ Hoàng Anh chuyên khoa Nhi có thể giúp bạn. Lịch làm việc của bác sĩ Hoàng Anh là các ngày trong tuần. Bạn muốn đặt lịch vào ngày nào?", "keywords": "khám nhi, bác sĩ nhi, trẻ em"},
            
            # Appointment Management
            {"question": "Tôi muốn hủy lịch hẹn.", "answer": "Để hủy lịch hẹn, vui lòng cung cấp mã đặt lịch hoặc số điện thoại của bạn. Bạn cũng có thể tự hủy trên website hoặc ứng dụng nếu đã đăng nhập.", "keywords": "hủy lịch, đổi lịch"},
            {"question": "Lịch hẹn của tôi khi nào?", "answer": "Để kiểm tra lịch hẹn, vui lòng cung cấp mã đặt lịch hoặc số điện thoại và tên của bạn.", "keywords": "kiểm tra lịch hẹn, xem lịch"},
            
            # COVID-19 Related (Example)
            {"question": "Triệu chứng COVID là gì?", "answer": "Các triệu chứng phổ biến của COVID-19 bao gồm sốt, ho khan, mệt mỏi, mất vị giác hoặc khứu giác. Một số người có thể bị đau họng, đau đầu, tiêu chảy. Nếu nghi ngờ, bạn nên xét nghiệm và tự cách ly.", "keywords": "covid, corona, triệu chứng covid"},
            {"question": "Phòng khám có xét nghiệm COVID không?", "answer": "Hiện tại phòng khám chúng tôi có hỗ trợ xét nghiệm nhanh COVID-19. Vui lòng liên hệ hotline để biết thêm chi tiết và đặt lịch.", "keywords": "xét nghiệm covid, test covid"},

            # More diverse questions
            {"question": "Chế độ ăn cho người cao huyết áp?", "answer": "Người cao huyết áp nên ăn nhạt, giảm muối, hạn chế đồ ăn nhiều dầu mỡ, đồ ăn chế biến sẵn. Tăng cường rau xanh, trái cây, ngũ cốc nguyên hạt và cá. Nên tham khảo ý kiến bác sĩ dinh dưỡng để có chế độ ăn phù hợp nhất.", "keywords": "cao huyết áp, ăn uống, dinh dưỡng"},
            {"question": "Tập thể dục thế nào cho tốt?", "answer": "Nên tập thể dục ít nhất 150 phút mỗi tuần với cường độ vừa phải, hoặc 75 phút với cường độ mạnh. Các loại hình vận động tốt bao gồm đi bộ nhanh, chạy bộ, bơi lội, đạp xe. Hãy chọn loại hình bạn yêu thích và duy trì đều đặn.", "keywords": "tập thể dục, vận động, sức khỏe"},
            {"question": "Làm sao để giảm stress?", "answer": "Có nhiều cách để giảm stress như thiền, yoga, nghe nhạc, đọc sách, dành thời gian cho sở thích cá nhân, ngủ đủ giấc, và chia sẻ với người thân. Nếu stress ảnh hưởng nhiều đến cuộc sống, bạn nên tìm sự hỗ trợ từ chuyên gia tâm lý.", "keywords": "stress, căng thẳng, giảm stress"},
            {"question": "Phòng khám có dịch vụ khám sức khỏe tổng quát không?", "answer": "Có, chúng tôi cung cấp các gói khám sức khỏe tổng quát đa dạng, phù hợp với nhiều độ tuổi và nhu cầu. Bạn có thể tham khảo chi tiết trên website hoặc liên hệ để được tư vấn.", "keywords": "khám tổng quát, kiểm tra sức khỏe"},
            {"question": "Bảo hiểm y tế có được áp dụng không?", "answer": "Phòng khám chúng tôi chấp nhận một số loại bảo hiểm y tế tư nhân. Vui lòng cung cấp thông tin bảo hiểm của bạn để chúng tôi kiểm tra và tư vấn cụ thể.", "keywords": "bảo hiểm y tế, bhyt, thanh toán"}
        ]
        for data in knowledge_data:
            ChatbotKnowledge.objects.create(question=data["question"], answer=data["answer"], keywords=data["keywords"])
            self.stdout.write(self.style.SUCCESS(f'Added knowledge: {data["question"][:30]}...'))

        # --- Create HealthSymptoms ---
        self.stdout.write(self.style.HTTP_INFO('Creating HealthSymptoms...'))
        symptoms_data = [
            {"name": "Đau đầu", "description": "Cảm giác đau hoặc khó chịu ở vùng đầu.", "advice": "Nghỉ ngơi, uống đủ nước. Nếu đau dữ dội hoặc kéo dài, đi khám.", "related_specialization_names": ["Nội tổng quát", "Thần kinh"]},
            {"name": "Sốt", "description": "Nhiệt độ cơ thể cao hơn mức bình thường.", "advice": "Uống nhiều nước, hạ sốt bằng paracetamol nếu cần. Đi khám nếu sốt cao hoặc kéo dài.", "related_specialization_names": ["Nội tổng quát", "Nhi khoa"]},
            {"name": "Ho", "description": "Phản xạ của cơ thể để làm sạch đường hô hấp.", "advice": "Uống nước ấm, giữ ấm cổ. Đi khám nếu ho kéo dài hoặc có đờm bất thường.", "related_specialization_names": ["Nội tổng quát", "Tai mũi họng", "Nhi khoa"]},
            {"name": "Chóng mặt", "description": "Cảm giác mất thăng bằng, mọi thứ xung quanh quay cuồng.", "advice": "Ngồi hoặc nằm xuống từ từ. Tránh thay đổi tư thế đột ngột. Đi khám nếu thường xuyên hoặc nặng.", "related_specialization_names": ["Nội tổng quát", "Thần kinh", "Tim mạch"]},
            {"name": "Buồn nôn", "description": "Cảm giác khó chịu ở dạ dày, muốn nôn ọe.", "advice": "Ăn nhẹ, tránh đồ dầu mỡ. Uống trà gừng. Đi khám nếu nôn nhiều hoặc kéo dài.", "related_specialization_names": ["Nội tổng quát", "Tiêu hóa"]},
            {"name": "Đau bụng", "description": "Cảm giác đau ở vùng bụng.", "advice": "Xác định vị trí đau, tính chất đau. Chườm ấm nếu đau nhẹ. Đi khám nếu đau dữ dội, kéo dài hoặc kèm triệu chứng khác.", "related_specialization_names": ["Nội tổng quát", "Tiêu hóa", "Sản phụ khoa"]},
            {"name": "Mệt mỏi", "description": "Cảm giác thiếu năng lượng, uể oải.", "advice": "Nghỉ ngơi đủ, ăn uống cân bằng, tập thể dục nhẹ nhàng. Đi khám nếu mệt mỏi kéo dài không rõ nguyên nhân.", "related_specialization_names": ["Nội tổng quát"]},
            {"name": "Khó thở", "description": "Cảm giác không đủ không khí để thở, thở gấp.", "advice": "Giữ bình tĩnh, ngồi thẳng. Nếu khó thở đột ngột hoặc nặng, gọi cấp cứu hoặc đến bệnh viện ngay.", "related_specialization_names": ["Tim mạch", "Tai mũi họng", "Nội tổng quát"]},
            {"name": "Đau họng", "description": "Cảm giác đau, rát ở cổ họng.", "advice": "Súc miệng nước muối ấm, uống nhiều nước ấm. Tránh đồ cay nóng. Đi khám nếu đau nhiều hoặc có sốt.", "related_specialization_names": ["Tai mũi họng", "Nội tổng quát"]},
            {"name": "Chảy nước mũi", "description": "Dịch nhầy chảy ra từ mũi.", "advice": "Giữ ấm, xông mũi bằng nước muối sinh lý. Đi khám nếu nước mũi đặc, có màu lạ hoặc kèm sốt.", "related_specialization_names": ["Tai mũi họng", "Nhi khoa"]},
            {"name": "Phát ban", "description": "Sự thay đổi bất thường trên da, có thể là nốt đỏ, mụn nước.", "advice": "Giữ da sạch và khô. Tránh gãi. Đi khám để xác định nguyên nhân và điều trị.", "related_specialization_names": ["Da liễu", "Nhi khoa"]},
            {"name": "Đau lưng", "description": "Cảm giác đau ở vùng lưng.", "advice": "Nghỉ ngơi, chườm nóng hoặc lạnh. Tập các bài tập nhẹ nhàng cho lưng. Đi khám nếu đau kéo dài hoặc lan xuống chân.", "related_specialization_names": ["Cơ xương khớp", "Thần kinh"]},
            {"name": "Mất ngủ", "description": "Khó đi vào giấc ngủ hoặc duy trì giấc ngủ.", "advice": "Tạo thói quen ngủ đều đặn, không gian ngủ thoải mái. Hạn chế caffeine. Đi khám nếu mất ngủ kéo dài.", "related_specialization_names": ["Thần kinh", "Nội tổng quát"]},
            {"name": "Ợ nóng", "description": "Cảm giác nóng rát ở ngực, sau xương ức, thường lan lên cổ.", "advice": "Tránh ăn no, đồ cay nóng, dầu mỡ. Kê cao đầu khi ngủ. Đi khám nếu thường xuyên.", "related_specialization_names": ["Tiêu hóa"]},
            {"name": "Táo bón", "description": "Khó khăn khi đi đại tiện, phân khô cứng.", "advice": "Uống đủ nước, ăn nhiều chất xơ, vận động thường xuyên. Đi khám nếu táo bón kéo dài.", "related_specialization_names": ["Tiêu hóa", "Nhi khoa"]},
            {"name": "Tiêu chảy", "description": "Đi đại tiện phân lỏng nhiều lần trong ngày.", "advice": "Uống nhiều nước điện giải (oresol). Ăn thức ăn dễ tiêu. Đi khám nếu tiêu chảy nặng, mất nước hoặc có máu.", "related_specialization_names": ["Tiêu hóa", "Nhi khoa"]},
            {"name": "Đau khớp", "description": "Cảm giác đau nhức tại một hoặc nhiều khớp.", "advice": "Nghỉ ngơi, chườm ấm hoặc lạnh. Tránh vận động mạnh. Đi khám nếu đau kéo dài hoặc sưng khớp.", "related_specialization_names": ["Cơ xương khớp", "Nội tổng quát"]},
            {"name": "Sụt cân không rõ nguyên nhân", "description": "Giảm cân đáng kể mà không chủ ý thay đổi chế độ ăn hay tập luyện.", "advice": "Theo dõi cân nặng và các triệu chứng khác. Đi khám sớm để tìm nguyên nhân.", "related_specialization_names": ["Nội tổng quát", "Tiêu hóa"]},
            {"name": "Ù tai", "description": "Nghe thấy tiếng kêu, tiếng rít trong tai mà không có nguồn âm thanh bên ngoài.", "advice": "Tránh tiếng ồn lớn. Đi khám tai mũi họng để kiểm tra.", "related_specialization_names": ["Tai mũi họng", "Thần kinh"]},
            {"name": "Nhìn mờ", "description": "Khả năng nhìn không rõ ràng, hình ảnh bị nhòe.", "advice": "Tránh dụi mắt. Đi khám mắt sớm để kiểm tra và điều trị.", "related_specialization_names": ["Mắt", "Thần kinh"]}
        ]
        for sym_data in symptoms_data:
            # The HealthSymptom model does not have a ManyToManyField to Specialization.
            # It has 'related_conditions' and 'advice' fields.
            # We will store specialization names in 'related_conditions' as a comma-separated string for now.
            # Or, if the intention is to link to Specialization model, HealthSymptom model needs to be updated.
            # For now, let's assume we store names in related_conditions.
            
            related_specs_str = ", ".join(sym_data.get("related_specialization_names", []))
            
            HealthSymptom.objects.create(
                name=sym_data["name"], 
                description=sym_data["description"],
                advice=sym_data.get("advice", "Vui lòng tham khảo ý kiến bác sĩ."), # Add advice
                related_conditions=related_specs_str # Store specialization names here
            )
            self.stdout.write(self.style.SUCCESS(f'Created HealthSymptom: {sym_data["name"]}'))

        self.stdout.write(self.style.SUCCESS('Database population completed successfully!'))
